// Code generated by bpf2go; DO NOT EDIT.

package bpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadMain returns the embedded CollectionSpec for main.
func loadMain() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_MainBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load main: %w", err)
	}

	return spec, err
}

// loadMainObjects loads main and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*mainObjects
//	*mainPrograms
//	*mainMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadMainObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadMain()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// mainSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type mainSpecs struct {
	mainProgramSpecs
	mainMapSpecs
}

// mainSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type mainProgramSpecs struct {
	XdpProg *ebpf.ProgramSpec `ebpf:"xdp_prog"`
}

// mainMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type mainMapSpecs struct {
}

// mainObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadMainObjects or ebpf.CollectionSpec.LoadAndAssign.
type mainObjects struct {
	mainPrograms
	mainMaps
}

func (o *mainObjects) Close() error {
	return _MainClose(
		&o.mainPrograms,
		&o.mainMaps,
	)
}

// mainMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadMainObjects or ebpf.CollectionSpec.LoadAndAssign.
type mainMaps struct {
}

func (m *mainMaps) Close() error {
	return _MainClose()
}

// mainPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadMainObjects or ebpf.CollectionSpec.LoadAndAssign.
type mainPrograms struct {
	XdpProg *ebpf.Program `ebpf:"xdp_prog"`
}

func (p *mainPrograms) Close() error {
	return _MainClose(
		p.XdpProg,
	)
}

func _MainClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed main_bpf.o
var _MainBytes []byte
